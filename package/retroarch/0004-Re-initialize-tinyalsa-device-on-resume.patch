From f49fc2d21328fe35544d57c85031954bf3742742 Mon Sep 17 00:00:00 2001
From: Black-Seraph <admin@black-seraph.com>
Date: Fri, 12 May 2023 12:11:47 +0200
Subject: [PATCH] Re-initialize tinyalsa device on resume

---
 audio/drivers/tinyalsa.c | 133 +++++++++++++++++++++------------------
 1 file changed, 71 insertions(+), 62 deletions(-)

diff --git a/audio/drivers/tinyalsa.c b/audio/drivers/tinyalsa.c
index 14f09e5..108eaa6 100644
--- a/audio/drivers/tinyalsa.c
+++ b/audio/drivers/tinyalsa.c
@@ -44,11 +44,12 @@
 
 typedef struct tinyalsa
 {
+	unsigned int card;
+	unsigned int device;
+	struct pcm_config config;
 	struct pcm *pcm;
-	struct pcm_params *params;
 	size_t buffer_size;
 	bool nonblock;
-	bool is_paused;
 } tinyalsa_t;
 
 static void * tinyalsa_init(const char *devicestr, unsigned rate, unsigned latency, unsigned block_frames, unsigned *new_rate)
@@ -58,10 +59,9 @@ static void * tinyalsa_init(const char *devicestr, unsigned rate, unsigned laten
 	unsigned int frames_per_ms = 0;
 	unsigned int orig_rate = rate;
 	unsigned int max_rate, min_rate, buffer_size;
+	struct pcm_params *params;
 	float initial_latency;
 
-	struct pcm_config config;
-
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)calloc(1, sizeof(tinyalsa_t));
 
 	if (!tinyalsa)
@@ -70,17 +70,20 @@ static void * tinyalsa_init(const char *devicestr, unsigned rate, unsigned laten
 	if (devicestr)
 		sscanf(devicestr, "%u,%u", &card, &device);
 
+	tinyalsa->card = card;
+	tinyalsa->device = device;
+
 	RARCH_LOG("[TINYALSA]: Using card: %u, device: %u.\n", card, device);
 
-	tinyalsa->params = pcm_params_get(card, device, PCM_OUT);
-	if (!tinyalsa->params)
+	params = pcm_params_get(card, device, PCM_OUT);
+	if (!params)
 	{
 		RARCH_ERR("[TINYALSA]: params: Cannot open audio device.\n");
 		goto error;
 	}
 
-	min_rate = pcm_params_get_min(tinyalsa->params, PCM_PARAM_RATE);
-	max_rate = pcm_params_get_max(tinyalsa->params, PCM_PARAM_RATE);
+	min_rate = pcm_params_get_min(params, PCM_PARAM_RATE);
+	max_rate = pcm_params_get_max(params, PCM_PARAM_RATE);
 
 	if (!(rate >= min_rate && rate <= max_rate))
 	{
@@ -103,17 +106,17 @@ static void * tinyalsa_init(const char *devicestr, unsigned rate, unsigned laten
 		period_size = (unsigned int)atoi(period_size_override);
 	}
 
-	config.rate = rate;
-	config.format = is_little_endian() ? PCM_FORMAT_S16_LE : PCM_FORMAT_S16_BE;
-	config.channels = 2;
-	config.period_size = period_size;
-	config.period_count = 4;
-	config.start_threshold = config.period_size;
-	config.stop_threshold = config.period_size * config.period_count;
-	config.silence_threshold = config.period_size * config.period_count;
-	config.silence_size = 0;
+	tinyalsa->config.rate = rate;
+	tinyalsa->config.format = is_little_endian() ? PCM_FORMAT_S16_LE : PCM_FORMAT_S16_BE;
+	tinyalsa->config.channels = 2;
+	tinyalsa->config.period_size = period_size;
+	tinyalsa->config.period_count = 4;
+	tinyalsa->config.start_threshold = tinyalsa->config.period_size;
+	tinyalsa->config.stop_threshold = tinyalsa->config.period_size * tinyalsa->config.period_count;
+	tinyalsa->config.silence_threshold = tinyalsa->config.period_size * tinyalsa->config.period_count;
+	tinyalsa->config.silence_size = 0;
 
-	tinyalsa->pcm = pcm_open(card, device, PCM_OUT | PCM_MMAP | PCM_NONBLOCK, &config);
+	tinyalsa->pcm = pcm_open(card, device, PCM_OUT | PCM_MMAP | PCM_NONBLOCK, &tinyalsa->config);
 
 	if (!tinyalsa->pcm)
 	{
@@ -141,21 +144,21 @@ static void * tinyalsa_init(const char *devicestr, unsigned rate, unsigned laten
 	latency -= (unsigned int)initial_latency;
 	buffer_size += latency * frames_per_ms;
 
-	RARCH_LOG("[TINYALSA]: Audio rate: %uHz.\n", config.rate);
+	RARCH_LOG("[TINYALSA]: Audio rate: %uHz.\n", tinyalsa->config.rate);
 	RARCH_LOG("[TINYALSA]: Buffer size: %u frames.\n", buffer_size);
 	RARCH_LOG("[TINYALSA]: Buffer size: %u bytes.\n", (unsigned int)tinyalsa->buffer_size);
 	RARCH_LOG("[TINYALSA]: Frame size: %u bytes.\n", pcm_frames_to_bytes(tinyalsa->pcm, 1));
 	RARCH_LOG("[TINYALSA]: Latency: %ums.\n", buffer_size * 1000 / (rate * 4));
 
-	pcm_params_free(tinyalsa->params);
+	pcm_params_free(params);
 
 	return tinyalsa;
 
 error:
 	RARCH_ERR("[TINYALSA]: Failed to initialize tinyalsa driver.\n");
 
-	if (tinyalsa->params)
-		pcm_params_free(tinyalsa->params);
+	if (params)
+		pcm_params_free(params);
 
 	if (tinyalsa)
 		free(tinyalsa);
@@ -168,38 +171,43 @@ static ssize_t tinyalsa_write(void *data, const void *buf_, size_t size_)
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)data;
 	const uint8_t *buf = (const uint8_t*)buf_;
 	snd_pcm_sframes_t written = 0;
-	snd_pcm_sframes_t size = pcm_bytes_to_frames(tinyalsa->pcm, size_);
 	size_t frames_size = sizeof(int16_t);
 
-	if (tinyalsa->nonblock)
+	if (tinyalsa->pcm)
 	{
-		while (size)
+		snd_pcm_sframes_t size = pcm_bytes_to_frames(tinyalsa->pcm, size_);
+
+		if (tinyalsa->nonblock)
 		{
-			snd_pcm_sframes_t frames = pcm_writei(tinyalsa->pcm, buf, size);
+			while (size)
+			{
+				snd_pcm_sframes_t frames = pcm_writei(tinyalsa->pcm, buf, size);
 
-			if (frames < 0)
-				pcm_stop(tinyalsa->pcm);
+				if (frames < 0)
+					pcm_stop(tinyalsa->pcm);
 
-			written += frames;
-			buf     += (frames << 1) * frames_size;
-			size    -= frames;
+				written += frames;
+				buf     += (frames << 1) * frames_size;
+				size    -= frames;
+			}
 		}
-	}
-	else
-	{
-		while (size)
+		else
 		{
-			snd_pcm_sframes_t frames;
-			pcm_wait(tinyalsa->pcm, 10);
+			while (size)
+			{
+				snd_pcm_sframes_t frames;
+				pcm_wait(tinyalsa->pcm, 10);
 
-			frames   = pcm_writei(tinyalsa->pcm, buf, size);
+				frames   = pcm_writei(tinyalsa->pcm, buf, size);
+				frames = size;
 
-			if (frames < 0)
-				return -1;
+				if (frames < 0)
+					return -1;
 
-			written += frames;
-			buf     += (frames << 1) * frames_size;
-			size    -= frames;
+				written += frames;
+				buf     += (frames << 1) * frames_size;
+				size    -= frames;
+			}
 		}
 	}
 
@@ -210,13 +218,10 @@ static bool tinyalsa_stop(void *data)
 {
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)data;
 
-	if (!tinyalsa->is_paused)
+	if (tinyalsa->pcm != NULL)
 	{
-		uint8_t * silence = calloc(1, tinyalsa->buffer_size);
-		tinyalsa_write(tinyalsa, (const void *)silence, tinyalsa->buffer_size);
-		free(silence);
-
-		tinyalsa->is_paused = true;
+		pcm_close(tinyalsa->pcm);
+		tinyalsa->pcm = NULL;
 	}
 
 	return true;
@@ -226,22 +231,19 @@ static bool tinyalsa_alive(void *data)
 {
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)data;
 
-	if (tinyalsa)
-		return !tinyalsa->is_paused;
-
-	return false;
+	return tinyalsa != NULL && tinyalsa->pcm != NULL;
 }
 
 static bool tinyalsa_start(void *data, bool is_shutdown)
 {
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)data;
 
-	if (tinyalsa->is_paused)
+	if (tinyalsa->pcm == NULL)
 	{
-		tinyalsa->is_paused = false;
+		tinyalsa->pcm = pcm_open(tinyalsa->card, tinyalsa->device, PCM_OUT | PCM_MMAP | PCM_NONBLOCK, &tinyalsa->config);
 	}
 
-	return true;
+	return tinyalsa->pcm != NULL;
 }
 
 static void tinyalsa_set_nonblock_state(void *data, bool state)
@@ -262,10 +264,12 @@ static void tinyalsa_free(void *data)
 
 	if (tinyalsa)
 	{
-		if (tinyalsa->pcm)
+		if (tinyalsa->pcm != NULL)
+		{
 			pcm_close(tinyalsa->pcm);
+			tinyalsa->pcm = NULL;
+		}
 
-		tinyalsa->pcm = NULL;
 		free(tinyalsa);
 	}
 }
@@ -274,12 +278,17 @@ static size_t tinyalsa_write_avail(void *data)
 {
 	tinyalsa_t *tinyalsa = (tinyalsa_t*)data;
 
-	snd_pcm_sframes_t avail = pcm_avail_update(tinyalsa->pcm);
+	if (tinyalsa->pcm)
+	{
+		snd_pcm_sframes_t avail = pcm_avail_update(tinyalsa->pcm);
 
-	if (avail < 0)
-		return tinyalsa->buffer_size;
+		if (avail >= 0)
+		{
+			return pcm_frames_to_bytes(tinyalsa->pcm, avail);
+		}
+	}
 
-	return pcm_frames_to_bytes(tinyalsa->pcm, avail);
+	return tinyalsa->buffer_size;
 }
 
 static size_t tinyalsa_buffer_size(void *data)
-- 
2.25.1

